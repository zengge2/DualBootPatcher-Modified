// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "crypto_decrypt_generated.h"
#include "crypto_get_pw_type_generated.h"
#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"
#include "file_selinux_get_label_generated.h"
#include "file_selinux_set_label_generated.h"
#include "file_stat_generated.h"
#include "file_write_generated.h"
#include "mb_get_booted_rom_id_generated.h"
#include "mb_get_installed_roms_generated.h"
#include "mb_get_packages_count_generated.h"
#include "mb_get_version_generated.h"
#include "mb_set_kernel_generated.h"
#include "mb_switch_rom_generated.h"
#include "mb_wipe_rom_generated.h"
#include "path_chmod_generated.h"
#include "path_copy_generated.h"
#include "path_delete_generated.h"
#include "path_get_directory_size_generated.h"
#include "path_mkdir_generated.h"
#include "path_readlink_generated.h"
#include "path_selinux_get_label_generated.h"
#include "path_selinux_set_label_generated.h"
#include "reboot_generated.h"
#include "shutdown_generated.h"
#include "signed_exec_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct Request;

enum RequestType {
  RequestType_NONE = 0,
  RequestType_FileChmodRequest = 1,
  RequestType_FileCloseRequest = 2,
  RequestType_FileOpenRequest = 3,
  RequestType_FileReadRequest = 4,
  RequestType_FileSeekRequest = 5,
  RequestType_FileStatRequest = 6,
  RequestType_FileWriteRequest = 7,
  RequestType_FileSELinuxGetLabelRequest = 8,
  RequestType_FileSELinuxSetLabelRequest = 9,
  RequestType_PathChmodRequest = 10,
  RequestType_PathCopyRequest = 11,
  RequestType_PathSELinuxGetLabelRequest = 12,
  RequestType_PathSELinuxSetLabelRequest = 13,
  RequestType_PathGetDirectorySizeRequest = 14,
  RequestType_MbGetVersionRequest = 15,
  RequestType_MbGetInstalledRomsRequest = 16,
  RequestType_MbGetBootedRomIdRequest = 17,
  RequestType_MbSwitchRomRequest = 18,
  RequestType_MbSetKernelRequest = 19,
  RequestType_MbWipeRomRequest = 20,
  RequestType_MbGetPackagesCountRequest = 21,
  RequestType_RebootRequest = 22,
  RequestType_SignedExecRequest = 23,
  RequestType_ShutdownRequest = 24,
  RequestType_PathDeleteRequest = 25,
  RequestType_PathMkdirRequest = 26,
  RequestType_CryptoDecryptRequest = 27,
  RequestType_CryptoGetPwTypeRequest = 28,
  RequestType_PathReadlinkRequest = 29,
  RequestType_MIN = RequestType_NONE,
  RequestType_MAX = RequestType_PathReadlinkRequest
};

inline const char **EnumNamesRequestType() {
  static const char *names[] = {
    "NONE",
    "FileChmodRequest",
    "FileCloseRequest",
    "FileOpenRequest",
    "FileReadRequest",
    "FileSeekRequest",
    "FileStatRequest",
    "FileWriteRequest",
    "FileSELinuxGetLabelRequest",
    "FileSELinuxSetLabelRequest",
    "PathChmodRequest",
    "PathCopyRequest",
    "PathSELinuxGetLabelRequest",
    "PathSELinuxSetLabelRequest",
    "PathGetDirectorySizeRequest",
    "MbGetVersionRequest",
    "MbGetInstalledRomsRequest",
    "MbGetBootedRomIdRequest",
    "MbSwitchRomRequest",
    "MbSetKernelRequest",
    "MbWipeRomRequest",
    "MbGetPackagesCountRequest",
    "RebootRequest",
    "SignedExecRequest",
    "ShutdownRequest",
    "PathDeleteRequest",
    "PathMkdirRequest",
    "CryptoDecryptRequest",
    "CryptoGetPwTypeRequest",
    "PathReadlinkRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRequestType()[index];
}

template<typename T> struct RequestTypeTraits {
  static const RequestType enum_value = RequestType_NONE;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileChmodRequest> {
  static const RequestType enum_value = RequestType_FileChmodRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileCloseRequest> {
  static const RequestType enum_value = RequestType_FileCloseRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileOpenRequest> {
  static const RequestType enum_value = RequestType_FileOpenRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileReadRequest> {
  static const RequestType enum_value = RequestType_FileReadRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileSeekRequest> {
  static const RequestType enum_value = RequestType_FileSeekRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileStatRequest> {
  static const RequestType enum_value = RequestType_FileStatRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileWriteRequest> {
  static const RequestType enum_value = RequestType_FileWriteRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileSELinuxGetLabelRequest> {
  static const RequestType enum_value = RequestType_FileSELinuxGetLabelRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::FileSELinuxSetLabelRequest> {
  static const RequestType enum_value = RequestType_FileSELinuxSetLabelRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathChmodRequest> {
  static const RequestType enum_value = RequestType_PathChmodRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathCopyRequest> {
  static const RequestType enum_value = RequestType_PathCopyRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathSELinuxGetLabelRequest> {
  static const RequestType enum_value = RequestType_PathSELinuxGetLabelRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathSELinuxSetLabelRequest> {
  static const RequestType enum_value = RequestType_PathSELinuxSetLabelRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathGetDirectorySizeRequest> {
  static const RequestType enum_value = RequestType_PathGetDirectorySizeRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbGetVersionRequest> {
  static const RequestType enum_value = RequestType_MbGetVersionRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbGetInstalledRomsRequest> {
  static const RequestType enum_value = RequestType_MbGetInstalledRomsRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbGetBootedRomIdRequest> {
  static const RequestType enum_value = RequestType_MbGetBootedRomIdRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbSwitchRomRequest> {
  static const RequestType enum_value = RequestType_MbSwitchRomRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbSetKernelRequest> {
  static const RequestType enum_value = RequestType_MbSetKernelRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbWipeRomRequest> {
  static const RequestType enum_value = RequestType_MbWipeRomRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::MbGetPackagesCountRequest> {
  static const RequestType enum_value = RequestType_MbGetPackagesCountRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::RebootRequest> {
  static const RequestType enum_value = RequestType_RebootRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::SignedExecRequest> {
  static const RequestType enum_value = RequestType_SignedExecRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::ShutdownRequest> {
  static const RequestType enum_value = RequestType_ShutdownRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathDeleteRequest> {
  static const RequestType enum_value = RequestType_PathDeleteRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathMkdirRequest> {
  static const RequestType enum_value = RequestType_PathMkdirRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::CryptoDecryptRequest> {
  static const RequestType enum_value = RequestType_CryptoDecryptRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::CryptoGetPwTypeRequest> {
  static const RequestType enum_value = RequestType_CryptoGetPwTypeRequest;
};

template<> struct RequestTypeTraits<mbtool::daemon::v3::PathReadlinkRequest> {
  static const RequestType enum_value = RequestType_PathReadlinkRequest;
};

bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type);
bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6
  };
  RequestType request_type() const {
    return static_cast<RequestType>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REQUEST) &&
           VerifyRequestType(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(RequestType request_type) {
    fbb_.AddElement<uint8_t>(Request::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Request::VT_REQUEST, request);
  }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    RequestType request_type = RequestType_NONE,
    flatbuffers::Offset<void> request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type) {
  switch (type) {
    case RequestType_NONE: {
      return true;
    }
    case RequestType_FileChmodRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileChmodRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileCloseRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileCloseRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileOpenRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileOpenRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileReadRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileReadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSeekRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileSeekRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileStatRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileStatRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileWriteRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileWriteRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSELinuxGetLabelRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileSELinuxGetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSELinuxSetLabelRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::FileSELinuxSetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathChmodRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathChmodRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathCopyRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathCopyRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathSELinuxGetLabelRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathSELinuxGetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathSELinuxSetLabelRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathSELinuxSetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathGetDirectorySizeRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathGetDirectorySizeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetVersionRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbGetVersionRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetInstalledRomsRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbGetInstalledRomsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetBootedRomIdRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbGetBootedRomIdRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbSwitchRomRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbSwitchRomRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbSetKernelRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbSetKernelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbWipeRomRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbWipeRomRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetPackagesCountRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::MbGetPackagesCountRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_RebootRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::RebootRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_SignedExecRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::SignedExecRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_ShutdownRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::ShutdownRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathDeleteRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathDeleteRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathMkdirRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathMkdirRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_CryptoDecryptRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::CryptoDecryptRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_CryptoGetPwTypeRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::CryptoGetPwTypeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathReadlinkRequest: {
      auto ptr = reinterpret_cast<const mbtool::daemon::v3::PathReadlinkRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestType(
        verifier,  values->Get(i), types->GetEnum<RequestType>(i))) {
      return false;
    }
  }
  return true;
}

inline const mbtool::daemon::v3::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<mbtool::daemon::v3::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mbtool::daemon::v3::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mbtool::daemon::v3::Request> root) {
  fbb.Finish(root);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
